{"version":3,"sources":["webpack:///./src/management_func.js","webpack:///./src/pages/Index.vue?44a3","webpack:///./src/pages/Index.vue?f67b","webpack:///src/pages/Index.vue","webpack:///./src/pages/Index.vue","webpack:///./src/store/mapBindIDItems.js"],"names":["importAll","this","serverImport","removeAll","removeDB","serverExportToCSV","servicePath","timeframe","console","group","$q","notify","color","message","html","$FeathersVuex","api","Management","serverExportAsCSV","then","response","log","type","catch","error","groupEnd","removeDBFile","serviceStore","servicePath2servicePathName","entry","remove","serverSystemAction","action","resultMessage","result","Array","isArray","resp","stdout","gitPull","respPart","startScaleDemo","$store","dispatch","component","_vm","_h","$createElement","_c","_self","staticClass","_v","_s","_f","time","directives","name","rawName","attrs","$t","on","$event","QPage","QBtn","Ripple","decapitalizeFirstLetter","string","charAt","toLowerCase","slice","servicePath2modelClassName","modelParts","split","map","item","toUpperCase","join","mapBindIDItems","entryNames","resultServicePath","resultEntries","modelClassName","ModelClass","models","servicePathName","reactiveBase","Vue","set","get","gcList","entryName","val","find","query","paginate","resultFind","data","id","gcItem","useGet","model","_id","value","create","store","commit","gcItemClone","clone","patch","Object","assign"],"mappings":"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","file":"js/13.b52822db.js","sourcesContent":["\nimport { servicePath2servicePathName } from './store/mapBindIDItems.js'\n\nexport function importAll () {\n    this.serverImport('crate')\n    this.serverImport('crop')\n    this.serverImport('crop-filter')\n}\n\nexport function removeAll () {\n    // this.removeDBFile('crate')\n    // this.removeDBFile('crop')\n    // this.removeDBFile('crop-filter')\n    this.removeDB('crate')\n    this.removeDB('crop')\n    this.removeDB('crop-filter')\n}\n\nexport function serverExportToCSV (servicePath, timeframe) {\n    console.group('serverExportToCSV')\n    this.$q.notify({\n        color: 'info',\n        message: `Export ${servicePath} as CSV on server. Processing now.`,\n        html: true\n    })\n    this.$FeathersVuex.api.Management.serverExportAsCSV(servicePath, timeframe)\n        .then(response => {\n            console.log('serverImport: ', response)\n            this.$q.notify({\n                type: 'positive',\n                message: `${servicePath} done.`,\n                html: true\n            })\n        }).catch(error => {\n            console.error('serverImport:', error)\n            this.$q.notify({\n                type: 'negative',\n                message: `${servicePath} loading failed.`,\n                html: true\n            })\n        })\n    console.groupEnd()\n}\n\nexport function serverImport (servicePath) {\n    console.group('serverImport')\n    this.$q.notify({\n        color: 'info',\n        message: `Import ${servicePath} from server. Processing now.`,\n        html: true\n    })\n    this.$FeathersVuex.api.Management.serverImport(servicePath)\n        .then(response => {\n            console.log('serverImport: ', response)\n            this.$q.notify({\n                type: 'positive',\n                message: `${servicePath} done.`,\n                html: true\n            })\n        }).catch(error => {\n            console.error('serverImport:', error)\n            this.$q.notify({\n                type: 'negative',\n                message: `${servicePath} loading failed.`,\n                html: true\n            })\n        })\n    console.groupEnd()\n}\n\nexport function removeDBFile (servicePath) {\n    console.group('removeDBFile')\n    this.$q.notify({\n        color: 'info',\n        message: `remove ${servicePath} db from server. Processing now.`,\n        html: true\n    })\n    this.$FeathersVuex.api.Management.removeDBFile(servicePath)\n        .then(response => {\n            console.log('removeDBFile: ', response)\n            this.$q.notify({\n                type: 'positive',\n                message: `${servicePath} done.`,\n                html: true\n            })\n        }).catch(error => {\n            console.error('removeDBFile:', error)\n            this.$q.notify({\n                type: 'negative',\n                message: `${servicePath} removing failed.`,\n                html: true\n            })\n        })\n    console.groupEnd()\n}\n\nexport function removeDB (servicePath) {\n    console.group('removeDB', servicePath)\n    this.$q.notify({\n        color: 'info',\n        message: `remove all entries from ${servicePath}. Processing now.`,\n        html: true\n    })\n    const servicePathName = servicePath2servicePathName(servicePath)\n    const serviceStore = this.[servicePathName]\n    // console.log(this)\n    console.log('serviceStore', serviceStore)\n    for (var entry of serviceStore) {\n        console.log(entry)\n        entry.remove()\n    }\n    this.$q.notify({\n        type: 'positive',\n        message: `${servicePath} done.`,\n        // timeout: 30500,\n        html: true\n    })\n    console.groupEnd()\n}\n\nexport function serverSystemAction (action) {\n    console.group('serverSystemAction', action)\n    this.$q.notify({\n        color: 'info',\n        message: `initiated server system action '${action}'`,\n        html: true\n    })\n    this.$FeathersVuex.api.Management.serverSystemAction(action)\n        .then(response => {\n            console.log('serverSystemAction: ', response)\n            let resultMessage = ''\n            if (response.result) {\n                if (Array.isArray(response.result)) {\n                    for (const resp of response.result) {\n                        resultMessage += '\\n' + resp.stdout\n                    }\n                } else {\n                    resultMessage = response.result.stdout\n                }\n            }\n            console.log('resultMessage: ', resultMessage)\n            let message = `server system action '${action}' done.`\n            if (resultMessage) {\n                message += `\\n<br> '${resultMessage}'`\n            }\n            this.$q.notify({\n                type: 'positive',\n                message,\n                html: true\n            })\n        }).catch((error) => {\n            console.error('serverSystemAction:\\n', error)\n            // console.log(error.message)\n            this.$q.notify({\n                type: 'negative',\n                message: `'${action}' failed. \\n<br> '${error}'`,\n                html: true\n            })\n        })\n    console.groupEnd()\n}\n\nexport function gitPull () {\n    const action = 'gitPull'\n    console.group(action)\n    this.$q.notify({\n        color: 'info',\n        message: 'pull software updates',\n        html: true\n    })\n    this.$FeathersVuex.api.Management.gitPull()\n        .then(response => {\n            console.log('gitPull: ', response)\n            let resultMessage = ''\n            if (response.result) {\n                if (Array.isArray(response.result)) {\n                    for (const resp of response.result) {\n                        for (const respPart of resp.stdout) {\n                            resultMessage += respPart + '\\n<br>'\n                        }\n                    }\n                    // console.log('resultMessage: ', resultMessage)\n                    // resultMessage = resultMessage.replace('\\n', '\\n<br> ')\n                } else {\n                    resultMessage = response.result.stdout\n                }\n            }\n            console.log('resultMessage: ', resultMessage)\n            let message = `'${action}' successful.`\n            if (resultMessage) {\n                message += `\\n<br> ${resultMessage}`\n            }\n            console.log('message: ', message)\n            this.$q.notify({\n                type: 'positive',\n                message,\n                html: true\n            })\n        }).catch(error => {\n            console.error(action, ': ', error)\n            this.$q.notify({\n                type: 'negative',\n                message: `'${action}' failed. \\n<br> '${error}'`,\n                html: true\n            })\n        })\n    console.groupEnd()\n}\n\nexport function startScaleDemo () {\n    // this.$FeathersVuex.api.Serial\n    // if (!model.demoHandler) {\n    //     model.demoHandler = new ScaleDemoGenerator(model.store)\n    // }\n    // model.demoHandler.start()\n    // model.store.commit('localconfig/setScaleUnit', 'kg')\n    this.$store.dispatch('localconfig/startScaleDemo').then(response => {\n        console.log('startScaleDemo: ', response)\n        this.$q.notify({\n            type: 'positive',\n            message: 'startScaleDemo done.',\n            html: true\n        })\n    }).catch(error => {\n        console.error('startScaleDemo:', error)\n        this.$q.notify({\n            type: 'negative',\n            message: 'startScaleDemo failed.',\n            html: true\n        })\n    })\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('q-page',{staticClass:\"fit column no-wrap justify-center items-center content-center\"},[_c('section',{staticClass:\"q-pa-md row justify-center\"},[_c('h1',[_vm._v(\"Web Harvest Log\")])]),_c('section',{staticClass:\"text-center\"},[_c('h1',[_vm._v(\"\\n            \"+_vm._s(_vm._f(\"formatdate\")(_vm.time,\"HH:mm:ss\"))+\"\\n        \")]),_c('h1',[_vm._v(\"\\n            \"+_vm._s(_vm._f(\"formatdate\")(_vm.time,\"DD.MM.YYYY\"))+\"\\n        \")])]),_c('section',[_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":_vm.$t('shutdown_system'),\"icon\":\"mdi-dock-window\"},on:{\"click\":function($event){return _vm.serverSystemAction('shutdown')}}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/@quasar/app/lib/webpack/loader.transform-quasar-imports.js!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@quasar/app/lib/webpack/loader.auto-import-client.js?kebab!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/@quasar/app/lib/webpack/loader.transform-quasar-imports.js!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@quasar/app/lib/webpack/loader.auto-import-client.js?kebab!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Index.vue?vue&type=script&lang=js&\"","<template>\n    <!-- <q-page class=\"flex flex-center\"> -->\n    <q-page class=\"fit column no-wrap justify-center items-center content-center\">\n        <section class=\"q-pa-md row justify-center\">\n            <h1>Web Harvest Log</h1>\n        </section>\n        <section class=\"text-center\">\n            <h1>\n                {{ time | formatdate(\"HH:mm:ss\") }}\n            </h1>\n            <h1>\n                {{ time | formatdate(\"DD.MM.YYYY\") }}\n            </h1>\n        </section>\n        <section>\n            <!-- <q-btn\n                v-ripple\n                label=\"open this in a new minimal window\"\n                icon=\"mdi-dock-window\"\n                @click=\"openInNewWindow()\"\n            /> -->\n            <q-btn\n                v-ripple\n                :label=\"$t('shutdown_system')\"\n                icon=\"mdi-dock-window\"\n                @click=\"serverSystemAction('shutdown')\"\n            />\n        </section>\n    </q-page>\n</template>\n\n<script>\nimport { date } from 'quasar'\nimport {\n    serverSystemAction\n} from '../management_func.js'\n\nexport default {\n    data () {\n        return {\n            url: 'https://github.com/s-light/quasar_with_featherjs/',\n            windowObjectReference: null,\n            time: new Date()\n        }\n    },\n    methods: {\n        serverSystemAction: serverSystemAction,\n        // openInNewWindow () {\n        //     // https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n        //     if (this.windowObjectReference == null || this.windowObjectReference.closed) {\n        //         this.windowObjectReference = window.open(\n        //             window.location,\n        //             'Harvest Log',\n        //             `\n        //                 resizable=yes,\n        //                 scrollbars=yes,\n        //                 menubar=no,\n        //                 toolbar=no,\n        //                 locationr=no,\n        //                 status=no\n        //             `)\n        //     } else {\n        //         this.windowObjectReference.focus()\n        //     };\n        // }\n        updateTime () {\n            this.time = new Date()\n        }\n    },\n    filters: {\n        formatdate (value, format = 'HH:mm:ss DD.MM.YYYY') {\n            // 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n            return date.formatDate(new Date(value), format)\n        },\n        toLocal (value, lang = 'de') {\n            return new Date(value).toLocaleString(lang)\n        }\n    },\n    mounted () {\n        setInterval(this.updateTime, 1000)\n    },\n    name: 'PageIndex'\n}\n</script>\n","import { render, staticRenderFns } from \"./Index.vue?vue&type=template&id=79e477bf&\"\nimport script from \"./Index.vue?vue&type=script&lang=js&\"\nexport * from \"./Index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\nimport QPage from 'quasar/src/components/page/QPage.js';\nimport QBtn from 'quasar/src/components/btn/QBtn.js';import Ripple from 'quasar/src/directives/Ripple.js';\nimport qInstall from \"../../node_modules/@quasar/app/lib/webpack/runtime.auto-import.js\";\nqInstall(component, 'components', {QPage,QBtn});qInstall(component, 'directives', {Ripple});\n","// inspired by mapBind.js\n// https://vuex.feathersjs.com/feathers-vuex-forms.html#feathersvuexinputwrapper\n\n// ------------------------------------------\n// usage:\n// import { mapBindIDItems } from 'store/mapBindIDItems.js'\n//\n// export default {\n//     name: 'ComponentName',\n//     computed: {\n//         ...mapBindIDItems('global-config', ['serialDevice', 'someOtherThing'])\n//     },\n// }\n\nimport Vue from 'vue'\nimport {\n    // useFind,\n    useGet\n} from 'feathers-vuex'\nimport {\n// import feathersClient, {\n    models\n} from '../feathers-client'\n\nexport function capitalizeFirstLetter (string) {\n    // https://stackoverflow.com/questions/1026069/how-do-i-make-the-first-letter-of-a-string-uppercase-in-javascript\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\nexport function decapitalizeFirstLetter (string) {\n    return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nexport function servicePath2modelClassName (servicePath) {\n    let modelParts = servicePath.split('-')\n    modelParts = modelParts.map(item => { return capitalizeFirstLetter(item) })\n    // console.log('modelParts', modelParts)\n    const modelClassName = modelParts.join('')\n    return modelClassName\n}\n\nexport function servicePath2servicePathName (servicePath) {\n    const modelClassName = servicePath2modelClassName(servicePath)\n    const servicePathName = decapitalizeFirstLetter(modelClassName)\n    return servicePathName\n}\n\nexport const findList = async function (servicePath) {\n    const modelClassName = servicePath2modelClassName(servicePath)\n    const ModelClass = models.api[modelClassName]\n    const params = {\n        query: {},\n        paginate: false\n    }\n    const resultFind = await ModelClass.find(params)\n    const gcList = resultFind.data\n    return gcList\n}\n\nexport const mapBindIDItems = function (servicePath, entryNames) {\n    // helper function for vuex\n    // create setter and getter functions for given store and properties\n\n    // ------------------------------------------\n    // global\n    const resultServicePath = {}\n    const resultEntries = {}\n\n    // console.log('models.api', models.api)\n    // const ModelClass = this.$FeathersVuex.api[servicePath2modelClassName(servicePath)]\n    const modelClassName = servicePath2modelClassName(servicePath)\n    // console.log('modelClassName', modelClassName)\n    const ModelClass = models.api[modelClassName]\n    // console.log('ModelClass', ModelClass)\n    const servicePathName = decapitalizeFirstLetter(modelClassName)\n\n    // ------------------------------------------\n    // prepare empty base\n    const reactiveBase = {}\n    Vue.set(reactiveBase, 'gcList', {})\n    resultServicePath[servicePathName] = {\n        get: function () {\n            return reactiveBase.gcList\n        }\n    }\n\n    for (const entryName of entryNames) {\n        resultEntries[entryName] = {\n            get: function () {\n                return null\n            },\n            set: function (val) {\n            }\n        }\n    }\n\n    // ------------------------------------------\n    // servicePath setup\n    const params = {\n        query: {},\n        paginate: false\n    }\n    ModelClass.find(params).then((resultFind) => {\n        for (const item of resultFind.data) {\n            reactiveBase.gcList[item.id] = item\n        }\n    }).catch((error) => {\n        // console.error(error.message, error)\n        console.error(error.type, error.message)\n    })\n\n    // ------------------------------------------\n    // entryNames setup\n    for (const entryName of entryNames) {\n        // get from server and store\n        const resultUseGet = useGet({\n            model: ModelClass,\n            id: entryName,\n            _id: entryName\n        })\n        let gcItem = resultUseGet.item.value\n        // check if item exists\n        if (!gcItem) {\n            // create new item\n            const data = {\n                id: entryName,\n                _id: entryName,\n                value: null\n            }\n            gcItem = new ModelClass(data)\n            // gcItem.create().catch((error) => {\n            //     console.log('mapBindIDItems: create - ' + error.message, error)\n            // })\n            gcItem.create().catch((error) => {\n                console.error('mapBindIDItems: create - ', error.type, error.message)\n                // console.log('gcItem', gcItem)\n                // console.log('ModelClass', ModelClass)\n                // console.log('ModelClass.store.commit', ModelClass.store.commit)\n                // console.log(`ModelClass.store.commit '${ModelClass.store.commit}'`)\n                console.log('→ manually commit mutation *addItem*')\n                ModelClass.store.commit(servicePath + '/addItem', data)\n            })\n        }\n        const gcItemClone = gcItem.clone()\n        resultEntries[entryName].get = function () {\n            return gcItemClone.value\n        }\n        resultEntries[entryName].set = function (val) {\n            gcItemClone.value = val\n            gcItemClone.commit()\n            gcItem.patch({ data: { value: val } })\n        }\n    }\n    const result = Object.assign({}, resultServicePath, resultEntries)\n    return result\n}\n"],"sourceRoot":""}